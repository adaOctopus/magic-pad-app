"use client"

import * as React from "react"
import { useState, createContext, useContext, useRef, useEffect } from "react"

import { cn } from "@/lib/utils"

const SidebarContext = createContext({
  isOpen: false,
  onOpen: () => {},
  onClose: () => {},
})

interface SidebarProviderProps {
  children: React.ReactNode
}

export function SidebarProvider({ children }: SidebarProviderProps) {
  const [isOpen, setIsOpen] = useState(false)

  const onOpen = () => setIsOpen(true)
  const onClose = () => setIsOpen(false)

  return (
    <SidebarContext.Provider value={{ isOpen, onOpen, onClose }}>
      {children}
    </SidebarContext.Provider>
  )
}

export const Sidebar = ({ className, children, ...props }: React.ComponentProps<"aside">) => {
  const { isOpen, onClose } = useContext(SidebarContext)
  const sidebarRef = useRef(null)

  useEffect(() => {
    const handleClickOutside = (event: any) => {
      if (sidebarRef.current && !(sidebarRef.current as any).contains(event.target)) {
        onClose()
      }
    }

    document.addEventListener("mousedown", handleClickOutside)
    return () => {
      document.removeEventListener("mousedown", handleClickOutside)
    }
  }, [sidebarRef, onClose])

  return (
    <aside
      ref={sidebarRef}
      className={cn(
        "fixed left-0 top-0 z-50 h-full w-72 border-r bg-background py-4 transition-transform duration-300 ease-in-out md:translate-x-0",
        isOpen ? "translate-x-0" : "-translate-x-full",
        className
      )}
      {...props}
    >
      {children}
    </aside>
  )
}

export const SidebarHeader = ({ className, children, ...props }: React.ComponentProps<"div">) => {
  return (
    <div className={cn("px-4", className)} {...props}>
      {children}
    </div>
  )
}

export const SidebarContent = ({ className, children, ...props }: React.ComponentProps<"div">) => {
  return (
    <div className={cn("flex-1 overflow-y-auto py-4", className)} {...props}>
      {children}
    </div>
  )
}

export const SidebarTrigger = ({ className, ...props }: React.ComponentProps<"button">) => {
  const { onOpen } = useContext(SidebarContext)
  return (
    <button
      className={cn(
        "inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 md:hidden",
        className
      )}
      onClick={onOpen}
      {...props}
    >
      <svg
        xmlns="http://www.w3.org/2000/svg"
        width="24"
        height="24"
        viewBox="0 0 24 24"
        fill="none"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
        className="h-4 w-4"
      >
        <line x1="3" y1="12" x2="21" y2="12" />
        <line x1="3" y1="6" x2="21" y2="6" />
        <line x1="3" y1="18" x2="21" y2="18" />
      </svg>
      <span className="sr-only">Open sidebar</span>
    </button>
  )
}

